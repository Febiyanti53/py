import datetime
from tabulate import tabulate

class Kamar:
    def __init__(self, tipe=None):
        self.tipe_kamar_list = [
            "Standard Room",
            "Deluxe Room",
            "Family Room (2 tempat tidur)",
            "Family Room (3 tempat tidur)"
        ]
        self.fasilitas_kamar = {
            "Standard Room": ["Kasur nyaman ukuran Queen", "AC & Wi-Fi gratis", "TV LED 32 inci", "Kamar mandi dengan shower"],
            "Deluxe Room": ["Kasur ukuran King", "AC & Wi-Fi", "TV LED 42 inci dengan layanan streaming", "Kamar mandi dengan bathtub", "Balkon"],
            "Family Room (2 tempat tidur)": ["2 Kasur ukuran Queen", "AC & Wi-Fi", "TV LED 50 inci dengan layanan streaming", "Kamar mandi luas dengan bathtub", "Ruang tamu kecil", "Sarapan gratis"],
            "Family Room (3 tempat tidur)": ["2 Kasur ukuran Queen", "AC & Wi-Fi", "TV LED 50 inci dengan layanan streaming", "Kamar mandi luas dengan bathtub", "Ruang tamu kecil", "Sarapan gratis"]
        }
        self.nomor_kamar = {
            "Standard Room": ["1A", "2A", "3A", "4A", "5A"],
            "Deluxe Room": ["1B", "2B", "3B"],
            "Family Room (2 tempat tidur)": ["1C", "2C", "3C"],
            "Family Room (3 tempat tidur)": ["1D", "2D", "3D"]
        }
        self.harga_kamar = {
            "Standard Room": 150000,
            "Deluxe Room": 225000,
            "Family Room (2 tempat tidur)": 345000,
            "Family Room (3 tempat tidur)": 410000
        }
        self.tipe = tipe

    def tampil_info(self):
        print("Tipe Kamar yang Tersedia:")
        for i, tipe in enumerate(self.tipe_kamar_list, start=1):
            print(f"{i}. {tipe} - Rp {self.harga_kamar[tipe]:,}")
            print("   Fasilitas:")
            for fasilitas in self.fasilitas_kamar[tipe]:
                print(f"   - {fasilitas}")

    def status_kamar(self):
        terisi = self.kamar_terisi()
        status_table = []
        tipe_list = [self.tipe] if self.tipe else self.tipe_kamar_list
        for tipe in tipe_list:
            for kamar in self.nomor_kamar[tipe]:
                status = "TERISI" if kamar in terisi else "KOSONG"
                status_table.append([tipe, kamar, status])
        return status_table

    @staticmethod
    def kamar_terisi():
        terisi = set()
        try:
            with open("data_checkin.txt", "r") as file:
                for line in file:
                    data = line.strip().split(" | ")
                    if len(data) >= 14 and data[13] == "BELUM":
                        kamar_data = data[14:]
                        for i in range(1, len(kamar_data), 3):
                            if i < len(kamar_data):
                                terisi.add(kamar_data[i])
        except FileNotFoundError:
            pass
        return terisi


class Tamu:
    def __init__(self):
        self.nama = self.input_nama()
        self._nik = self.input_nik()
        self._telepon = self.input_telepon()

    def input_nama(self):
        return input("Masukkan nama pemesan: ")

    def input_nik(self):
        while True:
            nik_input = input("Masukkan NIK: ")
            if nik_input.isdigit() and len(nik_input) == 16:
                return nik_input
            print("NIK harus terdiri dari 16 digit dan hanya berisi angka.")

    def input_telepon(self):
        while True:
            telepon_input = input("Masukkan No. Telepon: ")
            if telepon_input.isdigit() and 10 <= len(telepon_input) <= 13:
                return telepon_input
            print("Nomor telepon harus terdiri dari 10-13 digit dan hanya berisi angka.")


class Pemesanan(Kamar, Tamu):
    def __init__(self):
        Kamar.__init__(self)
        Tamu.__init__(self)

        self.jumlah_pesanan = self.validasi_jumlah_pesanan()
        self.tipe_kamar_dipilih = self.pilih_tipe_kamar()
        self.kamar_dipesan = []
        kamar_terisi = self.kamar_terisi()

        for i, tipe in enumerate(self.tipe_kamar_dipilih, start=1):
            kamar_tersedia = [k for k in self.nomor_kamar[tipe] if k not in kamar_terisi]
            if not kamar_tersedia:
                print(f"Maaf, tidak ada kamar kosong untuk tipe {tipe}. Silakan batalkan dan coba pesan ulang.")
                exit()
            print(f"Kamar tersedia untuk tipe {tipe}: {', '.join(kamar_tersedia)}")
            while True:
                nomor_kamar = input(f"Pilih nomor kamar {i} (tipe {tipe}): ").upper()
                if nomor_kamar in kamar_tersedia:
                    kamar_terisi.add(nomor_kamar)
                    break
                print("Nomor kamar tidak valid atau sudah terisi. Silakan pilih ulang.")
            harga = self.harga_kamar[tipe]
            self.kamar_dipesan.append({'tipe': tipe, 'nomor': nomor_kamar, 'harga': harga})

        self.waktu_checkin = self.validasi_tanggal_jam()
        self.lama_menginap = self.validasi_lama_menginap()
        self.total_harga = sum(item['harga'] for item in self.kamar_dipesan) * self.lama_menginap

        print(f"Total harga: Rp {self.total_harga:,}")
        self.status_pembayaran, self.dp_dibayar, self.sisa_pembayaran = self.pilih_pembayaran()

        self.metode_pembayaran_dp = self.validasi_metode_pembayaran()
        self.checkout = self.waktu_checkin + datetime.timedelta(days=self.lama_menginap)
        self.crash = 0
        self.id_transaksi = datetime.datetime.now().strftime("%Y%m%d%H%M%S")

    def validasi_jumlah_pesanan(self):
        while True:
            jumlah_input = input("Masukkan jumlah kamar yang ingin dipesan: ")
            if jumlah_input.isdigit() and int(jumlah_input) > 0:
                return int(jumlah_input)
            print("Input salah, harus angka lebih dari 0.")

    def pilih_tipe_kamar(self):
        pilihan_list = []
        print("Pilih tipe kamar untuk tiap kamar yang dipesan:")
        for i in range(self.jumlah_pesanan):
            print(f"Pilihan tipe kamar ke-{i+1}:")
            self.tampil_info()
            while True:
                pilihan = input(f"Pilih tipe kamar (1-{len(self.tipe_kamar_list)}): ")
                if pilihan.isdigit() and 1 <= int(pilihan) <= len(self.tipe_kamar_list):
                    pilihan_list.append(self.tipe_kamar_list[int(pilihan) - 1])
                    break
                print("Input tidak valid, silakan masukkan nomor yang benar.")
        return pilihan_list

    def validasi_tanggal_jam(self):
        while True:
            try:
                tanggal = input("Masukkan tanggal check-in (DD-MM-YYYY): ")
                jam = input("Masukkan jam check-in (HH:MM): ")
                datetime_str = tanggal + " " + jam
                return datetime.datetime.strptime(datetime_str, "%d-%m-%Y %H:%M")
            except ValueError:
                print("Format tanggal/jam tidak valid. Gunakan format DD-MM-YYYY dan HH:MM.")

    def validasi_lama_menginap(self):
        while True:
            lama = input("Masukkan lama menginap (malam): ")
            if lama.isdigit() and int(lama) > 0:
                return int(lama)
            print("Lama menginap harus angka dan lebih dari 0.")

    def pilih_pembayaran(self):
        print("Pilihan pembayaran:")
        print("1. Bayar DP 50% sekarang")
        print("2. Bayar lunas sekarang")
        while True:
            pilihan = input("Pilih opsi pembayaran (1/2): ")
            if pilihan == "1":
                dp_dibayar = self.total_harga // 2
                sisa = self.total_harga - dp_dibayar
                print(f"DP 50%: Rp {dp_dibayar:,}")
                print(f"Sisa pembayaran: Rp {sisa:,}")
                return "DP", dp_dibayar, sisa
            elif pilihan == "2":
                return "LUNAS", self.total_harga, 0
            print("Pilihan tidak valid.")

    def validasi_metode_pembayaran(self):
        while True:
            metode = input("Metode pembayaran (Cash/Debit): ").capitalize()
            if metode in ["Cash", "Debit"]:
                return metode
            print("Metode pembayaran tidak valid. Pilih Cash atau Debit.")

    def tampil_status_kamar(self):
        kamar_terisi = self.kamar_terisi()
        status_table = []
        for tipe in self.tipe_kamar_list:
            for kamar in self.nomor_kamar[tipe]:
                status = "TERISI" if kamar in kamar_terisi else "KOSONG"
                status_table.append([tipe, kamar, status])
        print(tabulate(status_table, headers=["Tipe Kamar", "Nomor Kamar", "Status"], tablefmt="grid"))

    def simpan_data(self):
        with open("data_checkin.txt", "a") as file:
            kamar_info = " | ".join(f"{k['tipe']} | {k['nomor']} | {k['harga']}" for k in self.kamar_dipesan)
            file.write(f"{self.id_transaksi} | {self.nama} | {self._nik} | {self._telepon} | "
                       f"{self.jumlah_pesanan} | {self.waktu_checkin.strftime('%d-%m-%Y %H:%M')} | "
                       f"{self.checkout.strftime('%d-%m-%Y %H:%M')} | "
                       f"{self.lama_menginap} | {self.metode_pembayaran_dp} | {self.total_harga} | "
                       f"{self.crash} | {self.status_pembayaran} | {self.sisa_pembayaran} | BELUM | {kamar_info}\n")

    def tampil_struk(self):
        print("\n===========================================================")
        print("                      PENGINAPAN CHOCO                      ")
        print("             Jl. Coklat Manis No. 5, Surabaya               ")
        print("                   Telp: (031) 888-9999                     ")
        print("===========================================================")
        print(f"\nNama Tamu          : {self.nama}")
        print(f"No. Telepon        : {self._telepon}")
        print(f"NIK                : {self._nik}")
        print("\nDetail kamar yang dipesan:")
        for idx, kamar in enumerate(self.kamar_dipesan, 1):
            print(f" {idx}. Tipe: {kamar['tipe']} - Nomor: {kamar['nomor']} - Harga/malam: Rp {kamar['harga']:,}")
        print(f"\nCheck-in           : {self.waktu_checkin.strftime('%d %B %Y (%H.%M)')}")
        print(f"Check-out          : {self.checkout.strftime('%d %B %Y (12.00)')}")
        print(f"Lama Menginap      : {self.lama_menginap} malam")
        print("\n--------------- INFORMASI PEMBAYARAN -------------------")
        print(f"Total Harga        : Rp {self.total_harga:,}")
        if self.status_pembayaran == "DP":
            print("Status Pembayaran  : DP 50%")
            print(f"DP Dibayar         : Rp {self.dp_dibayar:,}")
            print(f"Metode Pembayaran  : {self.metode_pembayaran_dp}")
            print(f"Sisa Pembayaran    : Rp {self.sisa_pembayaran:,}")
            print("(Sisa akan dibayar saat checkout)")
        else:
            print("Status Pembayaran  : LUNAS")
            print(f"Metode Pembayaran  : {self.metode_pembayaran_dp}")
        print(f"Biaya Tambahan     : Rp {self.crash:,}")
        total_dibayar = self.dp_dibayar + self.crash
        print(f"Total yang Dibayar : Rp {total_dibayar:,}")
        print("===========================================================")

    def biaya_tambahan(self):
        while True:
            try:
                nik = input("Masukkan NIK untuk proses checkout: ")
                if not nik.isdigit():
                    raise ValueError("NIK hanya boleh berisi angka")
                if len(nik) != 16:
                    raise ValueError("NIK harus terdiri dari 16 digit")
                break
            except ValueError as e:
                print(f"Error: {str(e)}")
                print("Silakan coba lagi.")

        ditemukan = False
        try:
            with open("data_checkin.txt", "r") as file:
                lines = file.readlines()

            for idx_line, line in enumerate(lines):
                data = line.strip().split(" | ")

                if len(data) >= 14 and data[2] == nik and data[13] == "BELUM":
                    ditemukan = True

                    self.id_transaksi = data[0]
                    self.nama = data[1]
                    self._nik = data[2]
                    self._telepon = data[3]
                    self.jumlah_pesanan = int(data[4])
                    self.waktu_checkin = datetime.datetime.strptime(data[5], "%d-%m-%Y %H:%M")
                    self.checkout = datetime.datetime.strptime(data[6], "%d-%m-%Y %H:%M")
                    self.lama_menginap = int(data[7])
                    self.metode_pembayaran_dp = data[8]
                    self.total_harga_awal = int(data[9])
                    self.crash = int(data[10])
                    self.status_pembayaran = data[11]
                    self.sisa_pembayaran = int(data[12])

                    self.kamar_dipesan = []
                    kamar_data = data[14:]

                    for i in range(0, len(kamar_data), 3):
                        if i + 2 < len(kamar_data):
                            kamar = {
                                'tipe': kamar_data[i],
                                'nomor': kamar_data[i + 1],
                                'harga': int(kamar_data[i + 2])
                            }
                            self.kamar_dipesan.append(kamar)

                    print(f"\nData ditemukan untuk: {self.nama}")
                    print(f"Check-out seharusnya: {self.checkout.strftime('%d-%m-%Y 12:00')}")
                    print(f"Total harga kamar: Rp {self.total_harga_awal:,}")
                    print(f"Status pembayaran: {self.status_pembayaran}")

                    if self.status_pembayaran == "DP":
                        print(f"Sisa pembayaran: Rp {self.sisa_pembayaran:,}")

                    jawab = input("Apakah tamu checkout melebihi jam 12.00? (ya/tidak): ").lower()
                    if jawab == "ya":
                        while True:
                            try:
                                jam_terlambat = int(input("Berapa jam keterlambatan? "))
                                if jam_terlambat <= 0:
                                    raise ValueError("Jam keterlambatan harus lebih dari 0")
                                break
                            except ValueError as e:
                                print(f"Error: {str(e)}")
                        self.crash = jam_terlambat * 50000
                        print(f"Biaya keterlambatan: {jam_terlambat} jam x Rp 50,000 = Rp {self.crash:,}")
                    else:
                        self.crash = 0
                        print("Tidak ada biaya keterlambatan.")

                    if self.status_pembayaran == "DP":
                        print("Total yang harus dibayar saat checkout:")
                        print(f"Sisa pembayaran kamar: Rp {self.sisa_pembayaran:,}")
                        print(f"Biaya keterlambatan: Rp {self.crash:,}")
                        total_checkout = self.sisa_pembayaran + self.crash
                        print(f"Total checkout: Rp {total_checkout:,}")

                        if total_checkout > 0:
                            while True:
                                metode_pelunasan = input("Metode pembayaran pelunasan (Cash/Debit): ").capitalize()
                                if metode_pelunasan in ["Cash", "Debit"]:
                                    break
                                print("Metode tidak valid. Pilih Cash atau Debit.")
                            self.metode_pembayaran_pelunasan = metode_pelunasan
                            print("Pembayaran pelunasan berhasil!")

                        self.status_pembayaran = "LUNAS"
                        self.sisa_pembayaran = 0

                    self.total_harga = self.total_harga_awal + self.crash

                    self.update_status_checkout(lines, idx_line)

                    self.tampil_struk_checkout()

                    break

            if not ditemukan:
                print("Data dengan NIK tersebut tidak ditemukan atau sudah checkout.")

        except FileNotFoundError:
            print("File data tidak ditemukan. Belum ada data pemesanan.")

    def tampil_struk_checkout(self):
        print("\n===========================================================")
        print("                      PENGINAPAN CHOCO                      ")
        print("             Jl. Coklat Manis No. 5, Surabaya               ")
        print("                   Telp: (031) 888-9999                     ")
        print("                    STRUK CHECKOUT                          ")
        print("===========================================================")

        print(f"\nNama Tamu          : {self.nama}")
        print(f"No. Telepon        : {self._telepon}")
        print(f"NIK                : {self._nik}")
        print("\nDetail kamar yang dipesan:")
        for idx, kamar in enumerate(self.kamar_dipesan, 1):
            print(f" {idx}. Tipe: {kamar['tipe']} - Nomor: {kamar['nomor']} - Harga/malam: Rp {kamar['harga']:,}")

        print(f"\nCheck-in           : {self.waktu_checkin.strftime('%d %B %Y (%H.%M)')}")
        print(f"Check-out          : {datetime.datetime.now().strftime('%d %B %Y (%H.%M)')}")
        print(f"Lama Menginap      : {self.lama_menginap} malam")

        print("\n----------------- RINCIAN PEMBAYARAN -------------------")
        subtotal = sum(item['harga'] for item in self.kamar_dipesan) * self.lama_menginap
        print(f"Subtotal Kamar     : Rp {subtotal:,}")

        if hasattr(self, 'metode_pembayaran_pelunasan'):
            dp_amount = subtotal // 2
            print(f"DP saat Check-in   : Rp {dp_amount:,} ({self.metode_pembayaran_dp})")
            print(f"Pelunasan Checkout : Rp {subtotal - dp_amount:,} ({self.metode_pembayaran_pelunasan})")
        else:
            print(f"Pembayaran         : Rp {subtotal:,} ({self.metode_pembayaran_dp})")

        print(f"Biaya Keterlambatan: Rp {self.crash:,}")

        total_final = subtotal + self.crash
        print(f"Total Akhir        : Rp {total_final:,}")
        print("Status Pembayaran  : LUNAS")
        print("===========================================================")
        print("Terima kasih telah menginap di Penginapan Choco!")
        print("===========================================================")

    def update_status_checkout(self, lines, line_idx):
        with open("data_checkin.txt", "w") as file_baru:
            for idx, line in enumerate(lines):
                if idx == line_idx:
                    data = line.strip().split(" | ")
                    # Update the record to checkout
                    if len(data) >= 14:
                        data[10] = str(self.crash)  # update crash
                        data[11] = "LUNAS"
                        data[12] = "0"
                        data[13] = "SUDAH"
                        file_baru.write(" | ".join(data) + "\n")
                        print("Status checkout berhasil diupdate.")
                else:
                    file_baru.write(line)


def main():
    while True:
        print("========== PENGINAPAN CHOCO ==========")
        print("1. Check-in")
        print("2. Checkout")
        print("3. Lihat Status Kamar")
        print("4. Keluar")

        pilihan = input("Pilih menu (1/2/3/4): ")
        if pilihan == "1":
            pemesanan = Pemesanan()
            pemesanan.simpan_data()
            pemesanan.tampil_struk()
        elif pilihan == "2":
            pemesanan = Pemesanan.__new__(Pemesanan)
            Kamar.__init__(pemesanan)
            pemesanan.biaya_tambahan()
        elif pilihan == "3":
            pemesanan = Pemesanan.__new__(Pemesanan)
            Kamar.__init__(pemesanan)
            pemesanan.tampil_status_kamar()
        elif pilihan == "4":
            print("Terima kasih telah menggunakan layanan kami.")
            break
        else:
            print("Pilihan tidak valid, coba lagi.")


if __name__ == "__main__":
    main()

