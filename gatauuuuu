import datetime
from tabulate import tabulate


class Kamar:
    def __init__(self):
        self.tipe_kamar = {
            "Standard Room": (150000, ["Kasur nyaman ukuran Queen", "AC & Wi-Fi gratis", "TV LED 32 inci", "Kamar mandi dengan shower"]),
            "Deluxe Room": (225000, ["Kasur ukuran King", "AC & Wi-Fi", "TV LED 42 inci dengan layanan streaming", "Kamar mandi dengan bathtub", "Balkon"]),
            "Family Room (2 tempat tidur)": (345000, ["2 Kasur ukuran Queen", "AC & Wi-Fi", "TV LED 50 inci dengan layanan streaming", "Kamar mandi luas dengan bathtub", "Ruang tamu kecil", "Sarapan gratis"]),
            "Family Room (3 tempat tidur)": (410000, ["2 Kasur ukuran Queen", "AC & Wi-Fi", "TV LED 50 inci dengan layanan streaming", "Kamar mandi luas dengan bathtub", "Ruang tamu kecil", "Sarapan gratis"])
        }
        self.nomor_kamar = {
            "Standard Room": ["1A", "2B", "3C", "4C", "5D"],
            "Deluxe Room": ["6E", "7F", "8G"],
            "Family Room (2 tempat tidur)": ["9H", "10J", "11K"],
            "Family Room (3 tempat tidur)": ["12L", "13M", "14N"]
        }

    def tampil_info_kamar(self):
        print("Tipe Kamar yang Tersedia:")
        for tipe, (harga, fasilitas) in self.tipe_kamar.items():
            print(f"{tipe} - Rp {harga:,}")
            print("   Fasilitas:")
            for f in fasilitas:
                print(f"   - {f}")

    def kamar_terisi(self):
        terisi = set()
        try:
            with open("data_checkin.txt", "r") as file:
                for line in file:
                    data = line.strip().split(" | ")
                    if len(data) >= 14 and data[13] == "BELUM":
                        kamar_data = data[14:]
                        for i in range(1, len(kamar_data), 3):
                            if i < len(kamar_data):
                                terisi.add(kamar_data[i])
        except FileNotFoundError:
            pass
        return terisi

    def tampil_status_kamar(self):
        kamar_terisi = self.kamar_terisi()
        print("Status Kamar (TERISI/KOSONG):")
        for tipe, kamar_list in self.nomor_kamar.items():
            print(f"\n{tipe}:")
            for kamar in kamar_list:
                status = "TERISI" if kamar in kamar_terisi else "KOSONG"
                print(f"Kamar {kamar}: {status}")


class Tamu:
    def __init__(self):
        self.nama = input("Masukkan nama pemesan: ")
        self._nik = self._validasi_nik()
        self._telepon = self._validasi_telepon()

    def _validasi_nik(self):
        while True:
            try:
                nik_input = input("Masukkan NIK: ")
                if not nik_input.isdigit() or len(nik_input) != 16:
                    raise ValueError("NIK harus terdiri dari 16 digit dan hanya berisi angka.")
                return nik_input
            except ValueError as e:
                print(f"Error: {e}")

    def _validasi_telepon(self):
        while True:
            try:
                telepon_input = input("Masukkan No. Telepon: ")
                if not telepon_input.isdigit() or not (10 <= len(telepon_input) <= 13):
                    raise ValueError("Nomor telepon harus terdiri dari 10-13 digit dan hanya berisi angka.")
                return telepon_input
            except ValueError as e:
                print(f"Error: {e}")


class Pemesanan:
    def __init__(self):
        self.kamar = Kamar()
        self.tamu = Tamu()
        self.jumlah_pesanan = 0
        self.tipe_kamar_dipilih = []
        self.kamar_dipesan = []
        self.waktu_checkin = None
        self.lama_menginap = 0
        self.total_harga = 0
        self.dp_dibayar = 0
        self.sisa_pembayaran = 0
        self.status_pembayaran = ""
        self.id_transaksi = ""

        self._init_pemesanan()

    def _init_pemesanan(self):
        self.jumlah_pesanan = int(input("Masukkan jumlah kamar yang ingin dipesan: "))
        self.tipe_kamar_dipilih = self._pilih_tipe_kamar()
        self.kamar_dipesan = self._pesan_kamar()
        self.waktu_checkin = self._input_waktu_checkin()
        self.lama_menginap = self._input_lama_menginap()
        self.total_harga = self._hitung_total_harga()
        self.status_pembayaran, self.dp_dibayar, self.sisa_pembayaran = self._input_pembayaran()
        self.id_transaksi = datetime.datetime.now().strftime("%Y%m%d%H%M%S")

    def _pilih_tipe_kamar(self):
        tipe_kamar_dipilih = []
        print("Pilih tipe kamar untuk tiap kamar yang dipesan:")
        for i in range(self.jumlah_pesanan):
            print(f"Pilihan tipe kamar ke-{i + 1}:")
            self.kamar.tampil_info_kamar()
            while True:
                pilihan = input(f"Pilih tipe kamar (1-{len(self.kamar.tipe_kamar)}): ")
                if pilihan.isdigit() and 1 <= int(pilihan) <= len(self.kamar.tipe_kamar):
                    tipe_kamar_dipilih.append(list(self.kamar.tipe_kamar.keys())[int(pilihan) - 1])
                    break
                print("Input tidak valid, silakan masukkan nomor yang benar.")
        return tipe_kamar_dipilih

    def _pesan_kamar(self):
        kamar_terisi = self.kamar.kamar_terisi()
        kamar_dipesan = []
        for tipe in self.tipe_kamar_dipilih:
            kamar_tersedia = [kamar for kamar in self.kamar.nomor_kamar[tipe] if kamar not in kamar_terisi]
            if not kamar_tersedia:
                print(f"Maaf, tidak ada kamar kosong untuk tipe {tipe}. Silakan coba pesan ulang.")
                exit()
            print(f"Kamar tersedia untuk tipe {tipe}: {', '.join(kamar_tersedia)}")
            while True:
                nomor_kamar = input(f"Pilih nomor kamar (tipe {tipe}): ").upper()
                if nomor_kamar in kamar_tersedia:
                    kamar_terisi.add(nomor_kamar)
                    harga = self.kamar.tipe_kamar[tipe][0]
                    kamar_dipesan.append({'tipe': tipe, 'nomor': nomor_kamar, 'harga': harga})
                    break
                print("Nomor kamar tidak valid atau sudah terisi. Silakan pilih ulang.")
        return kamar_dipesan

    def _input_waktu_checkin(self):
        while True:
            try:
                tanggal = input("Masukkan tanggal check-in (DD-MM-YYYY): ")
                jam = input("Masukkan jam check-in (HH:MM): ")
                return datetime.datetime.strptime(f"{tanggal} {jam}", "%d-%m-%Y %H:%M")
            except ValueError:
                print("Format tanggal/jam tidak valid. Gunakan format DD-MM-YYYY untuk tanggal dan HH:MM untuk jam.")

    def _input_lama_menginap(self):
        while True:
            try:
                lama = int(input("Masukkan lama menginap (malam): "))
                if lama <= 0:
                    raise ValueError("Lama menginap harus lebih dari 0.")
                return lama
            except ValueError as e:
                print(f"Error: {e}")

    def _hitung_total_harga(self):
        return sum(item['harga'] for item in self.kamar_dipesan) * self.lama_menginap

    def _input_pembayaran(self):
        print("Total harga: Rp " + "{:,}".format(self.total_harga))
        print("1. Bayar DP 50% sekarang")
        print("2. Bayar lunas sekarang")
        while True:
            pilihan_bayar = input("Pilih opsi pembayaran (1/2): ")
            if pilihan_bayar in ['1', '2']:
                if pilihan_bayar == '1':
                    dp = self.total_harga // 2
                    return "DP", dp, self.total_harga - dp
                else:
                    return "LUNAS", self.total_harga, 0
            print("Pilihan tidak valid.")

    def tampil_struk(self):
        print("\n===========================================================")
        print("                      PENGINAPAN CHOCO                      ")
        print("===========================================================")
        print(f"Nama Tamu          : {self.tamu.nama}")
        print(f"No. Telepon        : {self.tamu._telepon}")
        print(f"NIK                : {self.tamu._nik}")
        print("\nDetail kamar yang dipesan:")
        for idx, kamar in enumerate(self.kamar_dipesan, 1):
            print(f"{idx}. Tipe: {kamar['tipe']} - Nomor: {kamar['nomor']} - Harga/malam: Rp {kamar['harga']:,}")
        print(f"\nCheck-in           : {self.waktu_checkin.strftime('%d %B %Y (%H.%M)')}")
        print(f"Lama Menginap      : {self.lama_menginap} malam")
        print(f"Total Harga        : Rp {self.total_harga:,}")
        print(f"Status Pembayaran  : {self.status_pembayaran}")
        print(f"DP Dibayar         : Rp {self.dp_dibayar:,}")
        print(f"Sisa Pembayaran    : Rp {self.sisa_pembayaran:,}")
        print("===========================================================")

    def tampil_struk_checkout(self):
        print("\n===========================================================")
        print("                      PENGINAPAN CHOCO                      ")
        print("                   STRUK CHECKOUT                           ")
        print("===========================================================")
        print(f"Nama Tamu          : {self.tamu.nama}")
        print(f"No. Telepon        : {self.tamu._telepon}")
        print(f"NIK                : {self.tamu._nik}")
        print("\nDetail kamar yang dipesan:")
        for idx, kamar in enumerate(self.kamar_dipesan, 1):
            print(f"{idx}. Tipe: {kamar['tipe']} - Nomor: {kamar['nomor']} - Harga/malam: Rp {kamar['harga']:,}")
        print(f"\nCheck-in           : {self.waktu_checkin.strftime('%d %B %Y (%H.%M)')}")
        print(f"Check-out          : {datetime.datetime.now().strftime('%d %B %Y (%H.%M)')}")
        print(f"Lama Menginap      : {self.lama_menginap} malam")
        print("\n----------------- RINCIAN PEMBAYARAN -------------------")
        subtotal = sum(item['harga'] for item in self.kamar_dipesan) * self.lama_menginap
        print(f"Subtotal Kamar     : Rp {subtotal:,}")
        dp_amount = subtotal // 2 if self.status_pembayaran == "DP" else subtotal
        print(f"DP saat Check-in   : Rp {dp_amount:,}")
        if self.status_pembayaran == "DP":
            pelunasan = subtotal - dp_amount
            print(f"Pelunasan Checkout : Rp {pelunasan:,}")
        print("Biaya Keterlambatan: Rp 0")
        print(f"Total Akhir        : Rp {subtotal:,}")
        print("Status Pembayaran  : LUNAS")
        print("===========================================================")
        print("Terima kasih telah menginap di Penginapan Choco!")
        print("===========================================================")

    def update_status_checkout(self, nik):
        try:
            with open("data_checkin.txt", "r") as file:
                lines = file.readlines()
            with open("data_checkin.txt", "w") as file:
                for line in lines:
                    data = line.strip().split(" | ")
                    if len(data) >= 14 and data[2] == nik and data[13] == "BELUM":
                        data[11] = "LUNAS"
                        data[12] = "0"
                        data[13] = "SUDAH"
                        file.write(" | ".join(data) + "\n")
                    else:
                        file.write(line)
            print("Status checkout berhasil diupdate.")
        except FileNotFoundError:
            print("File data tidak ditemukan. Belum ada data pemesanan.")

    def checkout(self):
        print("\nProses Check-out")
        nik = input("Masukkan NIK untuk proses checkout: ")
        ditemukan = False
        try:
            with open("data_checkin.txt", "r") as file:
                lines = file.readlines()
            for line in lines:
                data = line.strip().split(" | ")
                if len(data) >= 14 and data[2] == nik and data[13] == "BELUM":
                    ditemukan = True
                    self.id_transaksi = data[0]
                    self.tamu.nama = data[1]
                    self.tamu._nik = data[2]
                    self.tamu._telepon = data[3]
                    self.jumlah_pesanan = int(data[4])
                    self.waktu_checkin = datetime.datetime.strptime(data[5], "%d-%m-%Y %H:%M")
                    self.lama_menginap = int(data[7])
                    self.status_pembayaran = data[11]
                    self.sisa_pembayaran = int(data[12])
                    self.kamar_dipesan = []
                    kamar_data = data[14:]
                    for i in range(0, len(kamar_data), 3):
                        if i + 2 < len(kamar_data):
                            kamar = {'tipe': kamar_data[i], 'nomor': kamar_data[i + 1], 'harga': int(kamar_data[i + 2])}
                            self.kamar_dipesan.append(kamar)

                    self.tampil_struk_checkout()
                    self.update_status_checkout(nik)
                    break
            if not ditemukan:
                print("Data dengan NIK tersebut tidak ditemukan atau sudah checkout.")
        except FileNotFoundError:
            print("File data tidak ditemukan. Belum ada data pemesanan.")


def main():
    while True:
        print("========== PENGINAPAN CHOCO ==========")
        print("1. Check-in")
        print("2. Checkout")
        print("3. Lihat Status Kamar (Tampilan Sederhana)")
        print("4. Lihat Status Kamar (Tampilan Tabel Otomatis)")
        print("5. Keluar")

        pilihan = input("Pilih menu (1/2/3/4/5): ")
        if pilihan == "1":
            pemesanan = Pemesanan()
            pemesanan.simpan_data()
            pemesanan.tampil_struk()
        elif pilihan == "2":
            pemesanan = Pemesanan.__new__(Pemesanan)
            pemesanan.checkout()
        elif pilihan == "3":
            pemesanan.kamar.tampil_status_kamar()
        elif pilihan == "4":
            pemesanan.kamar.tampil_status_kamar()
        elif pilihan == "5":
            print("Terima kasih telah menggunakan aplikasi Penginapan Choco!")
            break
        else:
            print("Pilihan tidak valid, silakan coba lagi.")


if __name__ == "__main__":
    main()
